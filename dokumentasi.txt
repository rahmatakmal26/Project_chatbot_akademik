# Dokumentasi Instalasi dan Menjalankan API Django dengan MySQL dan JWT Tokennya #

1. Persiapan Lingkungan:
   - Pastikan Python (versi 3.6+) sudah terinstal
   - Pastikan MySQL sudah terinstal dan berjalan

2. Buat Virtual Environment
   - python -m venv myenv
   - source myenv/bin/activate  # Linux/macOS
   - myenv\Scripts\activate  # Windows

3. Instalasi Django dan Dependensinya:
   pip install django djangorestframework djangorestframework-simplejwt mysqlclient

4. Membuat Proyek Django:
   django-admin startproject projectku
   cd api_project
   python manage.py startapp api

5. Buat Database di mysql:
    CREATE DATABASE mydatabase;
    CREATE USER 'myuser'@'localhost' IDENTIFIED BY 'mypassword';
    GRANT ALL PRIVILEGES ON mydatabase.* TO 'myuser'@'localhost';
    FLUSH PRIVILEGES;


6. Konfigurasi Database:
   - Buka file projectku/settings.py
   - Ubah konfigurasi DATABASES menjadi:
     DATABASES = {
         'default': {
             'ENGINE': 'django.db.backends.mysql',
             'NAME': 'mydatabase',
             'USER': 'myuser',
             'PASSWORD': 'mypassword',
             'HOST': 'localhost',
             'PORT': '3308', (port nya disesuaikan)
         }
     }
   - Ganti 'mydatabase', 'myuser', dan 'mypassword' dengan kredensial MySQL Anda

7. Konfigurasi Aplikasi:
   - Di projectku/settings.py, tambahkan 'rest_framework', 'rest_framework_simplejwt.token_blacklist', dan 'api' ke INSTALLED_APPS
   - Tambahkan konfigurasi REST_FRAMEWORK dan SIMPLE_JWT seperti yang ada di langkah 2 dari instruksi sebelumnya

8. Membuat Model, Serializer, dan View:
   - Buat model User di api/models.py
   - Buat UserSerializer di api/serializers.py
   - Buat RegisterView di api/views.py

9. Konfigurasi URL:
   - Edit projectku/urls.py sesuai dengan langkah 6 dari instruksi sebelumnya

10. Jalankan Migrasi Database:
   - python manage.py makemigrations
   - python manage.py migrate

11.  Buat Superuser untuk Admin
   - python manage.py createsuperuser

12. Menjalankan Server Pengembangan:
   - python manage.py runserver


Catatan:
- Pastikan untuk mengganti 'mydatabase', 'myuser', dan 'mypassword' dengan kredensial MySQL Anda yang sebenarnya.
- Jangan lupa untuk membuat database MySQL sebelum menjalankan migrasi.
- Untuk penggunaan produksi, pastikan untuk mengonfigurasi pengaturan keamanan yang tepat dan menggunakan server produksi seperti Gunicorn dengan Nginx.

Untuk informasi lebih lanjut tentang konfigurasi dan penggunaan, silakan merujuk ke dokumentasi Django, Django Rest Framework, dan SimpleJWT.


# Pengujian API menggunakan token JWT dengan Postman

## 1. Registrasi Pengguna Baru

1. Buat request POST baru ke `http://127.0.0.1:8000/api/register/`(dikarenakan saya pakai laragon dan menjalankan dengan nginx)
2. Di tab Body, pilih raw dan JSON
3. Masukkan data pengguna:
   ```json
   {
     "username": "userbaru",
     "email": "userbaru@gmail.com",
     "password": "rahmat123"
   }
   ```
4. Kirim request
5. Jika berhasil, maka akan menerima respons dengan status 201 Created dan token akses serta refresh

## 2. Login

1. Buat request POST baru ke `http://127.0.0.1:8000/api/login/`
2. Di tab Body, pilih raw dan JSON
3. Masukkan kredensial:
   ```json
   {
     "username": "userbaru",
     "password": "rahmat123"
   }
   ```
4. Kirim request
5. maka akan menerima token akses dan refresh

## 3. Akses Endpoint yang Dilindungi

1. Buat request GET baru ke endpoint yang dilindungi, misalnya `http://127.0.0.1:8000/api/protected//`
2. Di tab Authorization, pilih Type "Bearer Token"
3. Masukkan token akses yang diterima saat login
4. Kirim request
5. Jika berhasil, akan menerima respons 200 OK

## 4. Refresh Token

1. Buat request POST baru ke `http://127.0.0.1:8000/api/token/refresh/`
2. Di tab Body, pilih raw dan JSON
3. Masukkan refresh token:
   ```json
   {
     "refresh": "disini_masukkan_token_refresh"
   }
   ```
4. Kirim request
5. maka akan menerima token akses baru

## 5. Logout

1. Buat request POST baru ke `http://127.0.0.1:8000/api/logout/`
2. Di tab Authorization, pilih Type "Bearer Token" dan masukkan token akses
3. Di tab Body, pilih raw dan JSON
4. Masukkan refresh token:
   ```json
   {
     "refresh_token": "masukkan_refresh_token"
   }
   ```
5. Kirim request
6. Jika berhasil, akan menerima respons 205 Reset Content

## Verifikasi

- Coba akses endpoint yang dilindungi tanpa token atau dengan token yang sudah dinonaktifkan (setelah logout). seharusnya menerima respons 401 Unauthorized.
- Setelah logout, coba gunakan refresh token. Ini seharusnya gagal dengan respons 401 Unauthorized.

Jika semua langkah di atas berhasil, maka implementasi JWT berfungsi dengan baik.

